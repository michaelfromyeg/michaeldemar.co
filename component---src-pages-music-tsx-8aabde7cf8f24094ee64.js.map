{"version":3,"file":"component---src-pages-music-tsx-8aabde7cf8f24094ee64.js","mappings":"kKAiCA,IArBeA,IAA8C,IAA7C,SAAEC,GAAuBD,EACrC,OACIE,EAAAA,cAAA,OACIC,MAAO,CACHC,WAAY,OACZC,YAAa,OACbC,UAAUC,EAAAA,EAAAA,IAAO,IACjBC,QAAS,IAAGD,EAAAA,EAAAA,IAAO,SAAUA,EAAAA,EAAAA,IAAO,EAAI,OAG5CL,EAAAA,cAAA,UAAQC,MAAO,CACXM,aAAc,QAEdP,EAAAA,cAACQ,EAAAA,GAAK,CAACC,SAAUC,EAAAA,GAAUC,SAE/BX,EAAAA,cAAA,YAAOD,GACPC,EAAAA,cAACY,EAAAA,EAAM,MACL,C,0EC+Fd,UA9Fcd,IAA4C,IAA3C,SAAEW,GAAsBX,EACnC,MASMe,GAAOC,EAAAA,EAAAA,gBATC,eAWR,MAAEC,GAAUF,EAAKG,KAAKC,cAEtB,EAACC,EAAM,EAAEC,IAAaC,EAAAA,EAAAA,UAAkB,IAyB9C,OAJAC,EAAAA,EAAAA,YAAU,KApBQC,WACd,IACI,MAAMC,QAAYC,MACd,4EAKJ,GAFAC,QAAQC,IAAIH,IAEPA,EAAII,GAEL,YADAF,QAAQG,MAAML,GAIlB,MAAML,QAAeK,EAAIM,OACzBV,EAAUD,EACd,CAAE,MAAOU,GACLH,QAAQG,MAAMA,EAClB,GAIAE,EAAW,GACZ,IAGC9B,EAAAA,cAAC+B,EAAAA,EAAM,CAACtB,SAAUA,EAAUM,MAAOA,GAC/Bf,EAAAA,cAACgC,EAAAA,EAAG,CAACjB,MAAM,UACXf,EAAAA,cAAA,SAAG,uCACsC,IACrCA,EAAAA,cAAA,KACIiC,IAAI,sBACJC,OAAO,SACPC,KAAK,6GACR,QAEG,sEAIRnC,EAAAA,cAAA,OAAKoC,UAAU,cACVlB,EAAOmB,KAAIC,IACR,MAAMC,EAAgB,IAAIC,KACtBF,EAAM,iBACRG,mBAAmB,QAAS,CAC1BC,KAAM,UACNC,MAAO,OACPC,IAAK,YAGT,OACI5C,EAAAA,cAAA,OAAKoC,UAAU,aAAaS,IAAKP,EAAMQ,IACnC9C,EAAAA,cAAA,OACIoC,UAAU,cACVW,IAAKT,EAAMU,MAAM,GAAGC,IACpBC,IAAKZ,EAAMU,MAAM,GAAGG,OAExBnD,EAAAA,cAAA,MACIC,MAAO,CACHmD,OAAQ,yBAGhBpD,EAAAA,cAAA,MAAIoC,UAAU,eAAeE,EAAMe,OACnCrD,EAAAA,cAAA,KAAGoC,UAAU,gBAAgBE,EAAMgB,OACnCtD,EAAAA,cAAA,KAAGoC,UAAU,sBAAqB,aACnBG,GAEfvC,EAAAA,cAAA,KAAGoC,UAAU,gBAAgBE,EAAMiB,QACnCvD,EAAAA,cAAA,KAAGoC,UAAU,gBAAgBE,EAAMkB,QACnCxD,EAAAA,cAAA,KAAGoC,UAAU,aAAaD,KAAMG,EAAMmB,KAAK,UAGzC,KAIb,C","sources":["webpack://michaeldemar.co/./src/components/Format/Format.tsx","webpack://michaeldemar.co/./src/pages/music.tsx"],"sourcesContent":["import React, { ReactElement } from \"react\";\nimport Links, { Locations } from \"../Links/Links\";\nimport Footer from \"../Footer/Footer\"\n\nimport { rhythm } from \"../../utils/typography\";\n\ninterface FormatProps {\n    location: string;\n    title: string;\n    children: React.ReactNode | React.ReactElement[];\n}\n\nconst Format = ({ children }: FormatProps): ReactElement => {\n    return (\n        <div\n            style={{\n                marginLeft: `auto`,\n                marginRight: `auto`,\n                maxWidth: rhythm(36),\n                padding: `${rhythm(3 / 2)} ${rhythm(3 / 4)}`,\n            }}\n        >\n            <header style={{\n                marginBottom: `1em`\n            }}>\n                <Links location={Locations.POSTS} />\n            </header>\n            <main>{children}</main>\n            <Footer />\n        </div>\n    );\n};\n\nexport default Format;\n","import React, { ReactElement, useState, useEffect } from \"react\";\nimport Format from \"../components/Format/Format\";\nimport SEO from \"../components/SEO/SEO\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nimport \"../styles/music.scss\";\n\nconst NOTION_COLLECTION_UUID = \"d4aa82bc984a4236a5b2c6e11ce3da8b\";\n\ninterface Cover {\n    name: string;\n    url: string;\n    rawUrl: string;\n}\n\ninterface Album {\n    id: string;\n    Review: string;\n    Cover: Cover[];\n    Rating: string;\n    URL: string;\n    Arist: string;\n    \"Release Date\": string;\n    Album: string;\n}\n\ninterface MusicProps {\n    location: string;\n}\n\nconst Music = ({ location }: MusicProps): ReactElement => {\n    const query = graphql`\n        query MusicQuery {\n            site {\n                siteMetadata {\n                    title\n                }\n            }\n        }\n    `;\n    const data = useStaticQuery(query);\n\n    const { title } = data.site.siteMetadata;\n\n    const [albums, setAlbums] = useState<Album[]>([]);\n    const getAlbums = async (): Promise<void> => {\n        try {\n            const res = await fetch(\n                `https://notion-api.splitbee.io/v1/table/${NOTION_COLLECTION_UUID}`\n            );\n\n            console.log(res);\n\n            if (!res.ok) {\n                console.error(res);\n                return;\n            }\n\n            const albums = await res.json();\n            setAlbums(albums);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    useEffect(() => {\n        getAlbums();\n    }, []);\n\n    return (\n        <Format location={location} title={title}>\n            <SEO title=\"About\" />\n            <p>\n                View these reivews on my Notion site{\" \"}\n                <a\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                    href=\"https://notions.michaeldemar.co/d4aa82bc984a4236a5b2c6e11ce3da8b?v=d6979a6f4b4c4978b25a7ac10e972345&pvs=4\"\n                >\n                    here\n                </a>\n                ! (Note that with an Adblocker, this page may not load\n                correctly.)\n            </p>\n            <div className=\"album-grid\">\n                {albums.map(album => {\n                    const formattedDate = new Date(\n                        album[\"Release Date\"]\n                    ).toLocaleDateString(\"en-US\", {\n                        year: \"numeric\",\n                        month: \"long\",\n                        day: \"numeric\",\n                    });\n\n                    return (\n                        <div className=\"album-card\" key={album.id}>\n                            <img\n                                className=\"album-cover\"\n                                src={album.Cover[0].url}\n                                alt={album.Cover[0].name}\n                            />\n                            <hr\n                                style={{\n                                    margin: \"0rem 1rem 1rem 1rem\",\n                                }}\n                            />\n                            <h2 className=\"album-title\">{album.Album}</h2>\n                            <p className=\"album-artist\">{album.Arist}</p>\n                            <p className=\"album-release-date\">\n                                Released: {formattedDate}\n                            </p>\n                            <p className=\"album-rating\">{album.Rating}</p>\n                            <p className=\"album-review\">{album.Review}</p>\n                            <a className=\"album-link\" href={album.URL}>\n                                Listen\n                            </a>\n                        </div>\n                    );\n                })}\n            </div>\n        </Format>\n    );\n};\n\nexport default Music;\n"],"names":["_ref","children","React","style","marginLeft","marginRight","maxWidth","rhythm","padding","marginBottom","Links","location","Locations","POSTS","Footer","data","useStaticQuery","title","site","siteMetadata","albums","setAlbums","useState","useEffect","async","res","fetch","console","log","ok","error","json","getAlbums","Format","SEO","rel","target","href","className","map","album","formattedDate","Date","toLocaleDateString","year","month","day","key","id","src","Cover","url","alt","name","margin","Album","Arist","Rating","Review","URL"],"sourceRoot":""}