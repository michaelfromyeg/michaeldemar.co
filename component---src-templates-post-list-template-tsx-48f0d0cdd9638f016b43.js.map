{"version":3,"file":"component---src-templates-post-list-template-tsx-48f0d0cdd9638f016b43.js","mappings":"oOAyEA,MA9CmBA,IAAoD,IAAnD,KAAEC,EAAI,KAAEC,GAAuBF,EAC/C,MAAMG,EAAQF,EAAKG,YAAYD,OAASF,EAAKI,OAAOC,KAC9CC,EAAO,IAAIL,IAAOD,EAAKI,OAAOC,OAG9BE,GAAQC,EAAAA,EAAAA,GAASR,EAAKG,YAAYM,eAExC,QAAcC,IAAVH,EACA,MAAM,IAAII,MAAM,mDAAmDT,MAGvE,OACIU,EAAAA,cAAA,WAASC,UClCC,kCDmCND,EAAAA,cAAA,cACIA,EAAAA,cAACE,EAAAA,EAAW,CACRC,gBAAiB,oBACjBR,MAAOA,EACPS,IAAK,GAAGd,WACRW,UC1CD,oCD4CHD,EAAAA,cAAA,MAAIC,UCzCD,mCD0CCD,EAAAA,cAACK,EAAAA,KAAI,CACDC,MAAO,CAAEC,UAAW,QACpBC,GAAId,GAEHJ,IAGTU,EAAAA,cAAA,KAAGC,UCtDD,kCDsD0Bb,EAAKG,YAAYkB,OAEjDT,EAAAA,cAAA,WAASC,UCvDA,qCDwDLD,EAAAA,cAAA,KACIU,wBAAyB,CACrBC,OAAQvB,EAAKG,YAAYqB,aAAexB,EAAKyB,WAGrDb,EAAAA,cAAA,KAAGC,UC3DD,kCD4DED,EAAAA,cAACK,EAAAA,KAAI,CAACC,MAAO,CAAEC,UAAW,QAAUC,GAAId,GAAM,eAKhD,EESlB,MA/CyBP,IAIkB,IAJjB,KACtB2B,EAAI,YACJC,EAAW,SACXC,GACoB7B,EAEpB,MACI8B,MACIC,cAAc,MAAE5B,IAEpB6B,mBAAqBC,MAAOC,IAC5BP,GAGE,KAAEzB,EAAI,YAAEiC,EAAW,SAAEC,GAAaR,EAIlCS,EAAOC,KAAKC,IAAIJ,EAAc,EAAGC,GACjCI,EAAOF,KAAKG,IAAIN,EAAc,EAAG,GAEvC,OACItB,EAAAA,cAAC6B,EAAAA,EAAM,CAACb,SAAUA,EAAU1B,MAAOA,GAC/BU,EAAAA,cAAC8B,EAAAA,EAAG,CAACxC,MAAOD,IACZW,EAAAA,cAAC+B,EAAAA,EAAG,MACJ/B,EAAAA,cAAA,OAAKC,UCvDE,yCDwDFoB,EAAMW,KAAI,CAAAC,EAA8BC,KAAc,IAA3C,KAAE9C,GAAyB6C,EACnC,OAAOjC,EAAAA,cAACmC,EAAU,CAACC,IAAKF,EAAG7C,KAAMA,EAAMD,KAAMA,GAAQ,KAG7DY,EAAAA,cAAA,OAAKC,UC3DM,6CD4DNqB,EAAc,GACXtB,EAAAA,cAACK,EAAAA,KAAI,CAACG,GAAI,IAAInB,IAAgB,IAATsC,EAAa,GAAK,IAAIA,OACtC,QAGRL,EAAc,GAAKA,EAAcC,GAC9BvB,EAAAA,cAAA,YAAO,KAEVsB,EAAcC,GACXvB,EAAAA,cAACK,EAAAA,KAAI,CAACG,GAAI,IAAInB,KAAQmC,KAAS,SAGlC,C","sources":["webpack://michaeldemar.co/./src/components/PostHeader/PostHeader.tsx","webpack://michaeldemar.co/./src/components/PostHeader/PostHeader.module.scss","webpack://michaeldemar.co/./src/templates/PostListTemplate.tsx","webpack://michaeldemar.co/./src/templates/PostListTemplate.module.scss"],"sourcesContent":["import React, { ReactElement } from \"react\";\nimport { Link } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\n\nimport * as styles from \"./PostHeader.module.scss\";\n\ninterface PostHeaderProps {\n    type: string;\n    node: {\n        excerpt: string;\n        frontmatter: {\n            title: string;\n            featuredImage: {\n                childImageSharp: {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    fluid: any;\n                };\n            };\n            date: string;\n            description: string;\n        };\n        fields: {\n            slug: string;\n        };\n    };\n}\n\nconst PostHeader = ({ node, type }: PostHeaderProps): ReactElement => {\n    const title = node.frontmatter.title || node.fields.slug;\n    const link = `/${type}${node.fields.slug}`\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const image = getImage(node.frontmatter.featuredImage as any)\n\n    if (image === undefined) {\n        throw new Error(`Could not find header image for post with title ${title}!`)\n    }\n\n    return (\n        <article className={styles.post}>\n            <header>\n                <GatsbyImage\n                    backgroundColor={\"var(--background)\"}\n                    image={image}\n                    alt={`${title} header`}\n                    className={styles.image}\n                />\n                <h3 className={styles.title}>\n                    <Link\n                        style={{ boxShadow: `none` }}\n                        to={link}\n                    >\n                        {title}\n                    </Link>\n                </h3>\n                <p className={styles.date}>{node.frontmatter.date}</p>\n            </header>\n            <section className={styles.excerpt}>\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html: node.frontmatter.description || node.excerpt,\n                    }}\n                />\n                <p className={styles.more}>\n                    <Link style={{ boxShadow: `none` }} to={link}>\n                        Read more\n                    </Link>\n                </p>\n            </section>\n        </article>\n    );\n};\n\nexport default PostHeader;\n","// extracted by mini-css-extract-plugin\nexport var date = \"PostHeader-module--date--458df\";\nexport var excerpt = \"PostHeader-module--excerpt--7b804\";\nexport var image = \"PostHeader-module--image--fcf00\";\nexport var more = \"PostHeader-module--more--cd09b\";\nexport var post = \"PostHeader-module--post--ce34e\";\nexport var title = \"PostHeader-module--title--10b8b\";","import React, { ReactElement, ReactNode } from \"react\";\nimport { graphql, Link } from \"gatsby\";\n\nimport Bio from \"../components/Bio/Bio\";\nimport Format from \"../components/Format/Format\";\nimport SEO from \"../components/SEO/SEO\";\nimport PostHeader from \"../components/PostHeader/PostHeader\";\nimport * as styles from \"./PostListTemplate.module.scss\";\n\ninterface PostListTemplateProps {\n    children?: ReactNode;\n    data: {\n        site: {\n            siteMetadata: {\n                title: string;\n            };\n        };\n        allMarkdownRemark: {\n            edges: {\n                node: unknown;\n            }[];\n        };\n    };\n    pageContext: {\n        type: string;\n        currentPage: number;\n        numPages: number;\n    };\n    location: string;\n}\n\nconst PostListTemplate = ({\n    data,\n    pageContext,\n    location,\n}: PostListTemplateProps): ReactElement => {\n    // Get page title and posts\n    const {\n        site: {\n            siteMetadata: { title },\n        },\n        allMarkdownRemark: { edges: posts },\n    } = data;\n\n    // Get context of which page this is out of the list of pages\n    const { type, currentPage, numPages } = pageContext;\n\n    // Compute next and previous\n    // TODO: could implement fancier pagination hook, but given pages are so small currently, not urgent\n    const next = Math.min(currentPage + 1, numPages);\n    const prev = Math.max(currentPage - 1, 0);\n\n    return (\n        <Format location={location} title={title}>\n            <SEO title={type} />\n            <Bio />\n            <div className={styles.posts}>\n                {posts.map(({ node }: { node: unknown }, i: number) => {\n                    return <PostHeader key={i} type={type} node={node} />;\n                })}\n            </div>\n            <div className={styles.redirects}>\n                {currentPage > 1 && (\n                    <Link to={`/${type}${prev === 1 ? \"\" : `/${prev}`}`}>\n                        {`Back`}\n                    </Link>\n                )}\n                {currentPage > 1 && currentPage < numPages && (\n                    <span>{`â€¢`}</span>\n                )}\n                {currentPage < numPages && (\n                    <Link to={`/${type}/${next}`}>{`Next`}</Link>\n                )}\n            </div>\n        </Format>\n    );\n};\n\nexport default PostListTemplate;\n\nexport const pageQuery = graphql`\n    query postListQuery($skip: Int!, $limit: Int!, $type: String!) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            sort: { frontmatter: { date: DESC } }\n            filter: {\n                frontmatter: { type: { eq: $type }, published: { eq: true } }\n            }\n            limit: $limit\n            skip: $skip\n        ) {\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        description\n                        featuredImage {\n                            childImageSharp {\n                                gatsbyImageData(\n                                    placeholder: DOMINANT_COLOR\n                                    formats: [AUTO, WEBP, AVIF]\n                                    layout: CONSTRAINED\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n","// extracted by mini-css-extract-plugin\nexport var posts = \"PostListTemplate-module--posts--9eef9\";\nexport var redirects = \"PostListTemplate-module--redirects--b8e31\";"],"names":["_ref","node","type","title","frontmatter","fields","slug","link","image","getImage","featuredImage","undefined","Error","React","className","GatsbyImage","backgroundColor","alt","Link","style","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","data","pageContext","location","site","siteMetadata","allMarkdownRemark","edges","posts","currentPage","numPages","next","Math","min","prev","max","Format","SEO","Bio","map","_ref2","i","PostHeader","key"],"sourceRoot":""}